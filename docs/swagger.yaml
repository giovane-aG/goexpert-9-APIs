basePath: /
definitions:
  dtos.AcessToken:
    properties:
      token:
        type: string
    type: object
  dtos.CreateProductDto:
    properties:
      name:
        example: Galax RTX 3070
        type: string
      price:
        example: 3600.9
        type: number
    type: object
  dtos.CreateUserDto:
    properties:
      email:
        example: giovane@email.com
        type: string
      name:
        example: Giovane
        type: string
      password:
        example: "1234"
        type: string
    type: object
  dtos.LoginDto:
    properties:
      email:
        example: josvane@email.com
        type: string
      password:
        example: "1234"
        type: string
    type: object
  dtos.UpdateProductDto:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  dtos.UpdateUserDto:
    properties:
      email:
        example: giovane@email.com
        type: string
      name:
        example: Giovane
        type: string
    type: object
  entity.Product:
    properties:
      created_at:
        example: "2022-12-22T21:39:47.591209Z"
        type: string
      id:
        example: 405aac8a-76ea-456c-8fd5-44361a684fc4
        type: string
      name:
        example: GALAX RTX 3070OC
        type: string
      price:
        example: 4000
        type: number
    type: object
  entity.User:
    properties:
      email:
        example: giovane@email.com
        type: string
      id:
        example: 1c77fd61-4f6c-4ca1-8967-e5172e25c274
        type: string
      name:
        example: giovane
        type: string
      password:
        example: "1234"
        type: string
    type: object
  errors.Error:
    properties:
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: giovaneaalmeida27@gmail.com
    name: Giovane Aguiar
  description: Production API authentication.
  termsOfService: http://swagger.io/terms/
  title: Go Expert API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.AcessToken'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Login user
      tags:
      - auth
  /product:
    post:
      consumes:
      - application/json
      parameters:
      - description: the product info
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateProductDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Creates a product
      tags:
      - products
  /product/{id}:
    delete:
      parameters:
      - description: the product id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Deletes a product
      tags:
      - products
    put:
      consumes:
      - application/json
      parameters:
      - description: the product info
        in: path
        name: id
        required: true
        type: string
      - description: the product info
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateProductDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Updates a product
      tags:
      - products
  /product/findAll:
    get:
      consumes:
      - application/json
      parameters:
      - description: the page in the results
        in: query
        name: page
        type: integer
      - description: the number of records returned
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Fetches all products
      tags:
      - products
  /product/findById/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: the id of the product
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Fetches a product by id
      tags:
      - products
  /user:
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Create new user
      tags:
      - users
  /user/{id}:
    delete:
      description: Delete user
      parameters:
      - description: the id of the user
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - users
    put:
      description: Update user
      parameters:
      - description: the id of the user
        in: path
        name: id
        required: true
        type: string
      - description: payload to update the user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - users
  /user/findByEmail/{email}:
    get:
      consumes:
      - application/json
      description: Find user by email
      parameters:
      - description: the email of the user
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Find user by email
      tags:
      - users
  /user/findById/{id}:
    get:
      description: Find user by id
      parameters:
      - description: the id of the user
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Find user by id
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
